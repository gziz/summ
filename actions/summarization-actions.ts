"use server"

import { createSummaryAction } from "@/actions/db/summaries-actions"
import { InsertSummary } from "@/db/schema"
import { ActionState, SummarizationRequest } from "@/types"
import { v4 as uuidv4 } from "uuid"

// This is a mock implementation that would be replaced with actual API integration
export async function submitUrlForSummarizationAction(
  request: SummarizationRequest
): Promise<ActionState<{ id: string }>> {
  try {
    // In a real implementation, this would call an external API to generate the summary
    // For now, we'll create a mock summary based on the URL
    
    // Extract domain from URL for source name
    const url = new URL(request.url)
    const domain = url.hostname.replace("www.", "")
    
    // Determine content type based on URL pattern (simplified example)
    let contentType = "article"
    if (domain.includes("youtube")) {
      contentType = "youtube"
    } else if (domain.includes("substack")) {
      contentType = "newsletter"
    } else if (domain.includes("medium")) {
      contentType = "blog"
    }
    
    // Create a mock summary
    const mockSummary: InsertSummary = {
      id: uuidv4(),
      userId: request.userId,
      title: `Summary of content from ${domain}`,
      content: `This is a placeholder summary of the content found at ${request.url}.\n\nIn a real implementation, this would be generated by an AI model or external API.\n\nThe summary would be much longer and more detailed, covering the key points of the article, blog post, or video.\n\nIt would extract the main arguments, data points, and conclusions to give the reader a comprehensive understanding without needing to consume the full content.`,
      snippet: `This is a placeholder summary snippet for content from ${domain}...`,
      sourceUrl: request.url,
      sourceName: domain.charAt(0).toUpperCase() + domain.slice(1),
      sourceLogo: `https://www.google.com/s2/favicons?domain=${domain}&sz=128`,
      contentType: contentType as any
    }
    
    // Store the summary in the database
    const result = await createSummaryAction(mockSummary)
    
    if (!result.isSuccess) {
      return { isSuccess: false, message: result.message }
    }
    
    return {
      isSuccess: true,
      message: "URL submitted for summarization successfully",
      data: { id: result.data.id }
    }
  } catch (error) {
    console.error("Error submitting URL for summarization:", error)
    return { isSuccess: false, message: "Failed to submit URL for summarization" }
  }
} 